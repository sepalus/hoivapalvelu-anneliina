$x0_5: 4px;
$x1: 8px;
$x1_5: 12px;
$x2: 16px;
$x2_5: 20px;
$x3: 24px;
$x3_5: 28px;
$x4: 32px;
$x4_5: 36px;
$x5: 40px;
$x5_5: 44px;
$x6: 48px;
$x6_5: 52px;
$x7: 56px;
$x8: 64px;
$x9: 72px;
$x10: 80px;
$x11: 88px;
$x12: 96px;

$width-xs: 480px;
$width-s: 576px;
$width-m: 768px;
$width-l: 992px;
$width-xl: 1140px;
$width-xxl: 1440px;

$padding-horizontal-s: $x3;
$padding-horizontal-m: $x4;
$padding-horizontal-l: $x5;
$padding-outer-horizontal-s: $x3_5;
$padding-outer-horizontal-m: $x4_5;
$padding-outer-horizontal-l: $x5_5;
$padding-outer-horizontal-xl: $x6_5;

$header-height: 60px;
$content-height: calc(100vh - 60px);
$content-max-width: 1140px;
$content-outer-margin: calc(50vw - #{$content-max-width / 2});

$line-height-p-16: calc(16px * 1.66);
$line-height-p-17: calc(17px * 1.66);
$line-height-p-18: calc(18px * 1.66);

$color-white: #ffffff;
$color-black: #000000;
$color-lightgray: #e4e4e4;
$color-lightgray-light: #e8e8e8;
$color-lightgray-hover: #e8e8e8;
$color-lightgray-light-hover: #ececec;
$color-lightgray-ultralight: #fcfcfc;
$color-lightblue: #a4d3f2;
$color-darkblue: #0b4269;
$color-lightblue-light: #edf6fc; // 20% Opacity
$color-lightblue-ultralight: #f6fbfe; //10% Opacity
$color-beige: #f4f1e9;
$color-beige-light: #fbf9f6; //40% Opacity
$color-beige-ultralight: #fdfcfb; // 20% Opacity
$color-pink: #efbfcb;
$color-pink-light: #fcf2f5; // 20% Opacity

$border-radius: 3px;
$box-shadow-around: 1px 1px 2px 0px rgba(0, 0, 0, 0.2);
$box-shadow-around-opposite: -1px -1px 2px 0px rgba(0, 0, 0, 0.2);
$box-shadow-below: 0px 1px 2px 0px rgba(0, 0, 0, 0.2);
$box-shadow-below-half: 0px 1px 1px 0px rgba(0, 0, 0, 0.2);

$text-s: 16px;
$text-m: 17px;
$text-l: 18px;

$text-small-s: 14px;
$text-small-m: 15px;
$text-small-l: 16px;

$text-extrasmall-s: 12px;
$text-extrasmall-m: 13px;
$text-extrasmall-l: 14px;

$outer-padding-content-block-s: $x6 $padding-outer-horizontal-s $x7;
$outer-padding-content-block-m: $x7 $padding-outer-horizontal-m $x8;
$outer-padding-content-block-l: $x8 $padding-outer-horizontal-l $x9;
$outer-padding-content-block-xl: $x9 $padding-outer-horizontal-xl $x10;

$inner-padding-content-block-s: $x3_5 $padding-horizontal-s $x4_5;
$inner-padding-content-block-m: $x4_5 $padding-horizontal-m $x5_5;
$inner-padding-content-block-l: $x6 $padding-horizontal-l $x7;
$inner-padding-content-block-negative-s: (-$x3_5) (-$padding-horizontal-s)
  (-$x4_5);

$inner-gap-s: $x1;
$inner-gap-m: $x1;
$inner-gap-l: $x1_5;
$inner-gap-double-s: $x2;
$inner-gap-double-m: $x2;
$inner-gap-double-l: $x2_5;
$inner-gap-triple-s: $x3;
$inner-gap-triple-m: $x3;
$inner-gap-triple-l: $x3_5;

$outer-gap-s: $x1_5;
$outer-gap-m: $x5;
$outer-gap-l: $x6;
$outer-gap-xl: $x7;

$extra-gap-s: $x4;
$extra-gap-m: $x6;
$extra-gap-l: $x10;
$extra-gap-xl: $x12;

$inner-half-horizontal-padding-content-block-s: $x1_5;
$inner-half-horizontal-padding-content-block-m: $x2;
$inner-half-vertical-padding-content-block-s: $x1;
$inner-half-vertical-padding-content-block-m: $x2;

$inner-even-vertical-padding-content-block-s: $x4;
$inner-even-half-vertical-padding-content-block-s: $x3;
$inner-even-vertical-padding-content-block-m: $x5;
$inner-even-half-vertical-padding-content-block-m: $x3_5;
$inner-even-vertical-padding-content-block-l: $x6;
$inner-even-half-vertical-padding-content-block-l: $x4;
$outer-extra-padding-content-block-s: $x5;

$extra-padding-content-block-s: $x7 $x6 $x8;
$extra-padding-content-block-m: $x8 $x7 $x9;
$extra-padding-content-block-l: $x9 $x8 $x10;
$extra-padding-content-block-xl: $x10 $x9 $x11;

@function increaseSize($currentSize, $increaseFactor: 1.025) {
  @return $currentSize * $increaseFactor;
}

@function increaseFontSize($currentSize, $increaseSize: 1px) {
  @return $currentSize + $increaseSize;
}

@function getHorizontalPadding($screenSize: null) {
  @if $screenSize == "l" {
    @return $padding-horizontal-l;
  } @else if $screenSize == "m" {
    @return $padding-horizontal-m;
  } @else {
    @return $padding-horizontal-s;
  }
}

@mixin setOuterPaddings($noVerticalPadding: false, $extraSidePadding: false) {
  padding: $outer-padding-content-block-s;
  gap: $outer-gap-s;

  @media only screen and (min-width: $width-m) {
    padding: $outer-padding-content-block-m;
    gap: $outer-gap-m;
  }
  @media only screen and (min-width: $width-l) {
    padding: $outer-padding-content-block-l;
    gap: $outer-gap-l;
  }
  @media only screen and (min-width: $width-xl) {
    padding: $outer-padding-content-block-xl;
    gap: $outer-gap-xl;
  }

  @if $noVerticalPadding {
    padding-top: 0px;
    padding-bottom: 0px;
    @media only screen and (min-width: $width-m) {
      padding-top: 0px;
      padding-bottom: 0px;
    }
  }
  @if $extraSidePadding {
    padding-left: $outer-extra-padding-content-block-s;
    padding-right: $outer-extra-padding-content-block-s;
  }
}

@mixin setInnerPaddings(
  $removeBottomPadding: false,
  $removeTopPadding: false,
  $removeSidePadding: false,
  $halfHorizontalPadding: false,
  $halfVerticalPadding: false,
  $verticalAlignCenter: false,
  $doubleGap: false
) {
  padding: $inner-padding-content-block-s;
  @media only screen and (min-width: $width-m) {
    padding: $inner-padding-content-block-m;
  }
  @media only screen and (min-width: $width-l) {
    padding: $inner-padding-content-block-l;
  }

  @if ($halfHorizontalPadding == "s" or $halfHorizontalPadding == "sm") {
    padding-left: $inner-half-horizontal-padding-content-block-s;
    padding-right: $inner-half-horizontal-padding-content-block-s;
  }
  @if $halfHorizontalPadding == "m" or $halfHorizontalPadding == "sm" {
    @media only screen and (min-width: $width-m) {
      padding-left: $inner-half-horizontal-padding-content-block-m;
      padding-right: $inner-half-horizontal-padding-content-block-m;
    }
  }

  @if $halfVerticalPadding == "s" or $halfVerticalPadding == "sm" {
    padding-top: $inner-half-vertical-padding-content-block-s;
    padding-bottom: $inner-half-vertical-padding-content-block-s;
  }

  @if $halfHorizontalPadding == "m" or $halfHorizontalPadding == "sm" {
    @media only screen and (min-width: $width-m) {
      padding-top: $inner-half-vertical-padding-content-block-m;
      padding-bottom: $inner-half-vertical-padding-content-block-m;
    }
  }

  @if $removeBottomPadding == "s" or $removeBottomPadding == "sm" {
    padding-bottom: 0px;
  }

  @if $removeBottomPadding == "m" or $removeBottomPadding == "sm" {
    @media only screen and (min-width: $width-m) {
      padding-bottom: 0px;
    }
  }

  @if $removeTopPadding == "s" or $removeTopPadding == "sm" {
    padding-top: 0px;
  }

  @if $removeTopPadding == "m" or $removeTopPadding == "sm" {
    @media only screen and (min-width: $width-m) {
      padding-top: 0px;
    }
  }

  @if $removeSidePadding == "s" or $removeSidePadding == "sm" {
    padding-left: 0px;
    padding-right: 0px;
  }

  @if $removeSidePadding == "m" or $removeSidePadding == "sm" {
    @media only screen and (min-width: $width-m) {
      padding-left: 0px;
      padding-right: 0px;
    }
  }

  @if $verticalAlignCenter {
    @if $halfVerticalPadding == "s" or $halfVerticalPadding == "sm" {
      padding-top: $inner-even-half-vertical-padding-content-block-s;
      padding-bottom: $inner-even-half-vertical-padding-content-block-s;
    } @else {
      padding-top: $inner-even-vertical-padding-content-block-s;
      padding-bottom: $inner-even-vertical-padding-content-block-s;
    }

    @if $halfVerticalPadding == "m" or $halfVerticalPadding == "sm" {
      @media only screen and (min-width: $width-m) {
        padding-top: $inner-even-half-vertical-padding-content-block-m;
        padding-bottom: $inner-even-half-vertical-padding-content-block-m;
      }
      @media only screen and (min-width: $width-l) {
        padding-top: $inner-even-half-vertical-padding-content-block-l;
        padding-bottom: $inner-even-half-vertical-padding-content-block-l;
      }
    } @else {
      @media only screen and (min-width: $width-m) {
        padding-top: $inner-even-vertical-padding-content-block-m;
        padding-bottom: $inner-even-vertical-padding-content-block-m;
      }
      @media only screen and (min-width: $width-l) {
        padding-top: $inner-even-vertical-padding-content-block-l;
        padding-bottom: $inner-even-vertical-padding-content-block-l;
      }
    }
  }

  @if $doubleGap {
    gap: $inner-gap-double-s;
  } @else {
    gap: $inner-gap-s;
  }
  .content-block-button {
    margin-top: $inner-gap-s;
    margin-right: auto;
  }

  @media only screen and (min-width: $width-m) {
    @if $doubleGap {
      gap: $inner-gap-double-m;
    } @else {
      gap: $inner-gap-m;
    }
    .content-block-button {
      margin-top: $inner-gap-m;
    }
  }

  @media only screen and (min-width: $width-l) {
    @if $doubleGap {
      gap: $inner-gap-double-l;
    } @else {
      gap: $inner-gap-l;
    }
    .content-block-button {
      margin-top: $inner-gap-l;
    }
  }
}

@mixin setExtraPaddings() {
  padding: $extra-padding-content-block-s;
  gap: $extra-gap-s;
  @media only screen and (min-width: $width-m) {
    padding: $extra-padding-content-block-m;
    gap: $extra-gap-m;
  }
  @media only screen and (min-width: $width-l) {
    padding: $extra-padding-content-block-l;
    gap: $extra-gap-l;
  }
  @media only screen and (min-width: $width-xl) {
    padding: $extra-padding-content-block-xl;
    gap: $extra-gap-xl;
  }
}

@mixin setGap($tripleGap: false) {
  @if $tripleGap {
    gap: $inner-gap-double-s;
  } @else {
    gap: $inner-gap-s;
  }
  @media only screen and (min-width: $width-m) {
    @if $tripleGap {
      gap: $inner-gap-triple-m;
    } @else {
      gap: $inner-gap-m;
    }
  }
  @media only screen and (min-width: $width-l) {
    @if $tripleGap {
      gap: $inner-gap-triple-l;
    } @else {
      gap: $inner-gap-l;
    }
  }
}

@mixin setContentMaxWidth() {
  max-width: $content-max-width;
  height: 100%;
  margin-left: auto;
  margin-right: auto;
}

@mixin setNavigationGap() {
  gap: $x2;
  li:first-of-type {
    margin-right: $x2;
  }
  @media only screen and (min-width: $width-m) {
    gap: $x3;
    li:first-of-type {
      margin-right: $x3;
    }
  }
  @media only screen and (min-width: $width-l) {
    gap: $x4;
    li:first-of-type {
      margin-right: $x4;
    }
  }
}

@mixin setVerticalShadowLine() {
  &::after {
    content: "";
    display: block;
    position: absolute;
    height: 1px;
    left: calc(0px - #{getHorizontalPadding()});
    right: calc(0px - #{getHorizontalPadding()});
    bottom: 0px;
    box-shadow: $box-shadow-below-half;
    @media only screen and (min-width: $width-m) {
      left: calc(0px - #{getHorizontalPadding("m")});
      right: calc(0px - #{getHorizontalPadding("m")});
    }
    @media only screen and (min-width: $width-l) {
      left: calc(0px - #{getHorizontalPadding("l")});
      right: calc(0px - #{getHorizontalPadding("l")});
    }
  }
}

@mixin marginToPadding(
  $margin: null,
  $marginNegative: null,
  $marginTop: null,
  $marginSide: null,
  $marginBottom: null
) {
  @if $margin and $marginNegative {
    padding: $margin;
    margin: $marginNegative;
  }
  @if ($marginTop) {
    margin-top: (-$marginTop);
    padding-top: $marginTop;
  }
  @if ($marginSide) {
    margin-left: (-$marginSide);
    padding-left: $marginSide;
    margin-right: (-$marginSide);
    padding-right: $marginSide;
  }
  @if ($marginBottom) {
    margin-bottom: (-$marginBottom);
    padding-bottom: $marginBottom;
  }
}
